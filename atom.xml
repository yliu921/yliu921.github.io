<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yifei Liu</title>
  
  
  <link href="https://yifeiliu.dev/atom.xml" rel="self"/>
  
  <link href="https://yifeiliu.dev/"/>
  <updated>2024-10-04T01:44:36.308Z</updated>
  <id>https://yifeiliu.dev/</id>
  
  <author>
    <name>Yifei Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yifeiliu.dev/2024/10/03/hello-world/"/>
    <id>https://yifeiliu.dev/2024/10/03/hello-world/</id>
    <published>2024-10-04T01:44:36.308Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Xilinx FPGA Timing Constraint</title>
    <link href="https://yifeiliu.dev/2024/03/23/Xilinx-FPGA-Timing-Constraint/"/>
    <id>https://yifeiliu.dev/2024/03/23/Xilinx-FPGA-Timing-Constraint/</id>
    <published>2024-03-23T16:01:58.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="timing-constraint"><a class="markdownIt-Anchor" href="#timing-constraint"></a> Timing Constraint</h2><h3 id="timing"><a class="markdownIt-Anchor" href="#timing"></a> Timing</h3><p>Setup time:</p><p>Hold time:</p><p>Skew time:</p><p>Jitter</p><h3 id="timing-path"><a class="markdownIt-Anchor" href="#timing-path"></a> Timing Path</h3><p>There are 4 timing path in FPGA: 2 intra-chip and 2 inter-chip path.</p><table><thead><tr><th style="text-align:left">Path</th><th style="text-align:center">Start point</th><th style="text-align:center">End point</th><th style="text-align:left">Constraint</th></tr></thead><tbody><tr><td style="text-align:left">Input port to the 1st register</td><td style="text-align:center">ChipA/clk</td><td style="text-align:center">RegA/D</td><td style="text-align:left"><code>set_input_delay</code></td></tr><tr><td style="text-align:left">Path between registers</td><td style="text-align:center">RegA/clk</td><td style="text-align:center">RegB/D</td><td style="text-align:left"><code>create_clock</code></td></tr><tr><td style="text-align:left">Last register to output port</td><td style="text-align:center">RegB/clk</td><td style="text-align:center">ChipB/D</td><td style="text-align:left"><code>set_output_delay</code></td></tr><tr><td style="text-align:left">Input to output path</td><td style="text-align:center">DinA</td><td style="text-align:center">DinB</td><td style="text-align:left"><code>set_max_delay</code></td></tr></tbody></table><h3 id="timing-model"><a class="markdownIt-Anchor" href="#timing-model"></a> Timing Model</h3><p>Constraint on setup and hold time</p><h2 id="io-constraint"><a class="markdownIt-Anchor" href="#io-constraint"></a> I/O Constraint</h2><h3 id="pin-constraint"><a class="markdownIt-Anchor" href="#pin-constraint"></a> PIN constraint</h3><ul><li>PACKAGE_PIN: physical location of the pin</li><li>IO_IOSTANDARD: voltage</li><li>DIFF_TERM: Differential term</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_property -dict &#123;PACKAGE_PIN AJ16 IOSTANDARD LVCOMS18&#125; [get_ports <span class="string">&quot;led[0]&quot;</span>] </span><br></pre></td></tr></table></figure><h3 id="constraint-on-input-and-output"><a class="markdownIt-Anchor" href="#constraint-on-input-and-output"></a> Constraint on input and output</h3><ul><li><code>set_input_delay</code> and <code>set_output_delay</code></li></ul><h2 id="clock-constraint"><a class="markdownIt-Anchor" href="#clock-constraint"></a> Clock Constraint</h2><ol><li><code>create_clock</code></li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_clock -name &lt;name&gt; -period &lt;period&gt; -waveform &#123;&lt;rise_time&gt; &lt;fall_time&gt;&#125; [get_ports &lt;input_port&gt;]</span><br></pre></td></tr></table></figure><p>Clock used here must be <code>primary clock</code>: external clock or the <code>RXOUTCLK/TXOUTCLK</code> from Gigabyte Transceiver Gigabyte (GT). The timing unit in <code>create_clock</code> is <code>ns</code> and <code>50%</code> duty cycle by default. Using the <code>report_clocks</code>, we can check the constraint is valid or not. In general, the clock input is differential. We only need to constrain the <code>P</code> termination. If both <code>P</code> and <code>n</code> are constrained, <code>report_clock_interaction</code> will be report <code>unsafe</code>. This will incur the memory overhead, increasing</p><p>After synthesize and implementation, use the following two methods to check the primary clock.</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">report_clock_networks -name mainclock</span><br><span class="line">check_timing -override_defaults no_clock</span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>create_generated_clock</code></p></li><li><p><code>set_clock_groups</code></p></li></ol><ul><li><p><code>asynchronous</code></p></li><li><p>multiple clock setting for the same clock network, <code>-add</code></p></li><li><p><code>BUFGMUX</code>, apply mux to the input clocks.</p></li></ul><ol start="4"><li>Virtual Clock</li></ol><p>Delay constraints for the I/O.</p><ol start="5"><li>Max/Min delay constraint.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;timing-constraint&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#timing-constraint&quot;&gt;&lt;/a&gt; Timing Constraint&lt;/h2&gt;
&lt;h3 id=&quot;timing&quot;&gt;&lt;a class=&quot;mark</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Scatter Gather DMA in Xilinx FPGA</title>
    <link href="https://yifeiliu.dev/2024/02/23/Scatter-Gather-DMA/"/>
    <id>https://yifeiliu.dev/2024/02/23/Scatter-Gather-DMA/</id>
    <published>2024-02-24T02:00:34.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><h2 id="naming-convetion-and-system-diagram"><a class="markdownIt-Anchor" href="#naming-convetion-and-system-diagram"></a> Naming convetion and System diagram</h2><h2 id="register-in-xilinx-dma-ip"><a class="markdownIt-Anchor" href="#register-in-xilinx-dma-ip"></a> Register in Xilinx DMA IP</h2><h3 id="scatter-gather-descriptor"><a class="markdownIt-Anchor" href="#scatter-gather-descriptor"></a> Scatter Gather Descriptor</h3><ol><li>The descriptor is made up of eight 32-bit base words and 0 or 5 User Application words.</li><li>The Buffer Length can describe up to 67,108,863 bytes of data buffer per descriptor.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Descriptor Fields (Non-multichannel Mode)</span><br><span class="line">Address Space Offset (1) Name Description</span><br><span class="line">00h     NXTDESC               Next Descriptor Pointer</span><br><span class="line">04h     NXTDESC_MSB           Upper 32 bits of Next Descriptor Pointer</span><br><span class="line">08h     BUFFER_ADDRESS        Buffer Address</span><br><span class="line">0Ch     BUFFER_ADDRESS_MSB    Upper 32 bits of Buffer Address.</span><br><span class="line">10h     RESERVED              N/A</span><br><span class="line">14h     RESERVED              N/A</span><br><span class="line">18h     CONTROL               Control</span><br><span class="line">1Ch     STATUS                Status</span><br><span class="line">20h     APP0                  User Application Field 0 (2)</span><br><span class="line">24h     APP1                  User Application Field 1</span><br><span class="line">28h     APP2                  User Application Field 2</span><br><span class="line">2Ch     APP3                  User Application Field 3</span><br><span class="line">30h     APP4                  User Application Field 4</span><br></pre></td></tr></table></figure><p>Data Structure for Scatter Gather Descriptor</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sg_bd</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nxtdesc;<span class="comment">// </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nxtdesc_msb;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> buf_addr; <span class="comment">// address of the data to trasnfer from memory map to stream, </span></span><br><span class="line">                          <span class="comment">// should be aligned to the memory map data width</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> buf_addr_msb;<span class="comment">//</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> reserved0;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> reserved1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ctrl; <span class="comment">// 0x1c</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> status;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> app0 ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> app1 ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> app2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> app3;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> app4;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dummy[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="mm2s_control-register-0x18h"><a class="markdownIt-Anchor" href="#mm2s_control-register-0x18h"></a> MM2S_CONTROL register (0x18h)</h4><p>The value of thie register provides control for MM2S transfers from memory map to stream.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bits        Field Name                            Description</span><br><span class="line">25 to 0    Buffer Length          Indicates the size <span class="keyword">in</span> bytes of the transfer buffer.</span><br><span class="line">26   Transmit End Of Frame     End of Frame. Flag indicating the last buffer to be processed. </span><br><span class="line">                                  • 0 = Not End of Frame. </span><br><span class="line">                                  • 1 = End of Frame.</span><br><span class="line">27            TXSOF               Start of Frame. Flag indicating the first buffer to be processed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h2&gt;
&lt;h2 id=&quot;naming-convetion-and-system-diagram&quot;&gt;</summary>
      
    
    
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>Wifi Sniffer</title>
    <link href="https://yifeiliu.dev/2024/02/16/Wifi-Sniffer/"/>
    <id>https://yifeiliu.dev/2024/02/16/Wifi-Sniffer/</id>
    <published>2024-02-17T00:54:59.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Install aircrack-ng on Ubuntu</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install aircrack-ng -y</span><br></pre></td></tr></table></figure><ol start="2"><li>Check the wifi adapter supports the Monitor mode or not.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo airmon-ng</span><br><span class="line"></span><br><span class="line">PHY    Interface DriverChipset</span><br><span class="line"></span><br><span class="line">phy0wlp0s20f3 iwlwifiIntel</span><br><span class="line">phy1wlx3c   rtl8814auTRENDnet &lt;- Will use this wifi adapter </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Install aircrack-ng on Ubuntu&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1. Linux driver development</title>
    <link href="https://yifeiliu.dev/2024/02/10/1-Linux-driver-development/"/>
    <id>https://yifeiliu.dev/2024/02/10/1-Linux-driver-development/</id>
    <published>2024-02-11T05:52:13.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="driver-development"><a class="markdownIt-Anchor" href="#driver-development"></a> driver development</h3><h3 id="device-tree-brief"><a class="markdownIt-Anchor" href="#device-tree-brief"></a> Device tree brief</h3><h3 id="file-io-to-driver"><a class="markdownIt-Anchor" href="#file-io-to-driver"></a> File I/O to driver</h3><p>ref:</p><ol><li><a href="https://lwn.net/Kernel/LDD3/">https://lwn.net/Kernel/LDD3/</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;driver-development&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#driver-development&quot;&gt;&lt;/a&gt; driver development&lt;/h3&gt;
&lt;h3 id=&quot;device-tree-brief&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Use FMC expansion for GPIO</title>
    <link href="https://yifeiliu.dev/2024/01/28/Use-FMC-expansion-board-as-GPIO/"/>
    <id>https://yifeiliu.dev/2024/01/28/Use-FMC-expansion-board-as-GPIO/</id>
    <published>2024-01-28T22:39:44.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce how to use it as a GPIO board with a clock divider example.<br />This work will use the following devices:</p><ul><li>ZCU106 FPGA board</li><li>ALINX FH1010 expansion Ports</li><li>Digilent Analog Discovery 2</li></ul><p>The software will be used:</p><ul><li>Vivado 2020.2 and petalinux</li><li><a href="https://china.xilinx.com/member/forms/download/design-license.html?cid=f9c3f796-9b83-4261-bda7-7f56b9210428&amp;filename=rdf0450-zcu106-system-controller-c-2019-1.zip">Xilinx system controller</a></li></ul><p><img src="/images/FMC_expansion.png" alt="FMC" /></p><h2 id="clock-divider-design"><a class="markdownIt-Anchor" href="#clock-divider-design"></a> Clock divider design</h2><ol><li>Create an AXI-Lite IP and modify the axi interface IO. The AXI Lite IP comes with 4 registers and we will use the register 0 to store the the dividend.</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> clk_div_v1 (</span><br><span class="line">    <span class="comment">// axi ports</span></span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">output</span> clk_div);</span><br></pre></td></tr></table></figure><ol start="2"><li>Modify the AXI IP</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> clk_div_v1_S00_AXI(</span><br><span class="line">    <span class="comment">// axi ports</span></span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> clk_div</span><br><span class="line">);</span><br><span class="line">    <span class="comment">// Add user logic here</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>]cnt;</span><br><span class="line">    <span class="keyword">wire</span> en = slv_reg0 != <span class="number">0</span>; <span class="comment">// slv_reg0 is the register 0. When it&#x27;s 0, we would disable the clock divider. </span></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~S_AXI_ARESETN) <span class="keyword">begin</span></span><br><span class="line">            cnt &lt;= <span class="number">32&#x27;h0000_0000</span>;</span><br><span class="line">            clk_div &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(en) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == slv_reg0 &gt;&gt;<span class="number">1</span>) <span class="keyword">begin</span> <span class="comment">// every slv_reg0/2, flip the output clock</span></span><br><span class="line">                clk_div &lt;= ~clk_div;</span><br><span class="line">                cnt &lt;= <span class="number">32&#x27;h0000_0000</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                cnt &lt;= cnt + <span class="number">32&#x27;h0000_0001</span>;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">// end user logic</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="block-design"><a class="markdownIt-Anchor" href="#block-design"></a> Block Design</h2><p>Create the block as following:</p><ul><li>Add <code>Clocking Wizard</code> IP and set the <code>clk_out1</code> to <code>10MHz</code>.</li><li>Create the user constraint file for the generated clock and I/O:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set_property IOSTANDARD LVCMOS18 [get_ports clk_div]</span><br><span class="line">set_property PACKAGE_PIN B11 [get_ports clk_div]</span><br><span class="line">create_clock  -name clk_out1 -period 100ns  </span><br></pre></td></tr></table></figure><p>In this example, we are using the <code>LA23_P</code> I/O port to output the generated clock to the oscilloscope. <code>LA23_P</code> can be used as a single ended I/O and it’s voltage is set to 1.8V. It’s connected to the <code>PIN8</code> of <code>J2</code> in the ALINX expansion board.</p><p>The connection between the FPGA I/O pin to the expansion board can be found at <a href="https://docs.xilinx.com/v/u/en-US/ug1244-zcu106-eval-bd">UG1244</a> and <a href="https://alinx.com/public/upload/file/FL1010_User_Manual.pdf">FL1010 user manual</a>.</p><p>Next synthesis the project in Vivado and generate the firmware in Petalinux.</p><h2 id="setup-the-vadj-of-the-fpga"><a class="markdownIt-Anchor" href="#setup-the-vadj-of-the-fpga"></a> Setup the <code>Vadj</code> of the FPGA</h2><p>In ZCU106, the configuration of <code>Vadj</code> affects the output voltage of the I/O ports in the expansion board. However, it’s 0V by default. Therefore, we need to use the <code>System Control</code> application (in the pre-request) to configure the ZCU106 before using the I/O ports. This step needs a Windows PC to run the application. To setup the <code>Vadj</code> just click the button<br /><a href="/images/SC_Config.png">Configuration the Vadj</a></p><h2 id="boot-and-test-the-io"><a class="markdownIt-Anchor" href="#boot-and-test-the-io"></a> Boot and Test the IO</h2><p>The address the memory-mapped register of the clock divider IP is mapped to the <code>0xA0000000</code>. After booting the fpga (with firmware), ssh into the FPGA.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ devmem 0xA0000000 w 1000 <span class="comment"># write a word to the memory mapped register</span></span><br><span class="line">                           <span class="comment"># it&#x27;s divided the clk_out1 (10MHz) with 1000   </span></span><br></pre></td></tr></table></figure><p>The output looks like this:<br /><img src="/images/Frequency.png" alt="Divided frequency" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This post will introduce how to use it as a GPIO board with a clock divider example.&lt;br /&gt;
This work will use the following devices:&lt;/p&gt;
</summary>
      
    
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/categories/FPGA/"/>
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>Usage of bash script</title>
    <link href="https://yifeiliu.dev/2024/01/21/Usage-of-bash-script/"/>
    <id>https://yifeiliu.dev/2024/01/21/Usage-of-bash-script/</id>
    <published>2024-01-22T00:57:11.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="slepp-function"><a class="markdownIt-Anchor" href="#slepp-function"></a> slepp function</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 5d 1h 2m 30s</span><br></pre></td></tr></table></figure><p>where:</p><ul><li><code>s</code>: seconds</li><li><code>m</code>: minutes</li><li><code>h</code>: hours</li><li><code>d</code>: days</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;slepp-function&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#slepp-function&quot;&gt;&lt;/a&gt; slepp function&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
    <category term="bash" scheme="https://yifeiliu.dev/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>The Graphics Pipeline</title>
    <link href="https://yifeiliu.dev/2024/01/16/The-Graphics-Pipeline/"/>
    <id>https://yifeiliu.dev/2024/01/16/The-Graphics-Pipeline/</id>
    <published>2024-01-17T02:24:45.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<p>The graphics pipeline is another approach to rendering: drawing objects one by one onto the screen, or <code>object-order rendering</code>. Unlike in ray tracing, where we consider each pixel in turn and find the objects that influence its color, we will instead consider each geometric object in turn and find the pixels that it could have an effect on. The process of finding all the pixels in an image that are occupied by a geometric primitive is called <code>rasterization</code>. So object-order rendering can also be called rendering by rasterization. The sequence of operations is starting with objects and ending by updating pixels in the image, namely <code>graphics pipeline</code>.</p><p>Hardware pipelines must run fast enough to react in real time for games, visualizations, and user interfaces. Production pipelines must render the highest quality animation and visual effects possible and scale to enormous scenes, but may take much more time.</p><p>The work that needs to be done in object-order rendering can be organized into the task of rasterization itself, the operations that are done to geometry before rasterization, and the operations that are done to pixels after rasterization. <strong>The most common geometric operation is applying matrix transformations to map the points that define the geometry from object space to screen space, so that the input to the rasterizer is expressed in pixel coordinates, or screen space</strong>. The most common pixelwise operation is <code>hidden surface removal</code> which arranges for surfaces closer to the viewer to appear in front of surfaces farther from the viewer. <code>Geometric objects</code> are fed into the pipeline from an interactive application or from a scene description file, and they are always described by <code>sets of vertices</code>. The vertices are operated on in the <code>vertex-procssing stage</code>, then the primitives using those vertices are sent to the <code>rasterization stage</code>. The rasterizer breaks each primitive into a number of fragments, one for each pixel covered by the primitive. The fragments are processed in the fragment processing stage, and then the various fragments corresponding to each pixel are combined in the fragment blending stage.</p><h2 id="rasterization"><a class="markdownIt-Anchor" href="#rasterization"></a> Rasterization</h2><p>For each primitive that comes in, the rasterizer has two jobs:</p><ul><li>enumerating the pixels that are covered by the primitive;</li><li>then, interpolating values, called <code>attributes</code>, across the primitive.</li></ul><p>The output of the rasterizer is a set of <code>fragments</code>, one for each pixel covered by the primitive. <strong>Each fragment lives at a particular pixel and carries its own set of attribute values</strong>.</p><h3 id="line-drawing"><a class="markdownIt-Anchor" href="#line-drawing"></a> Line Drawing</h3><p>For general screen coordinate endpoints <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_0, y_0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1, y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, the routine should draw some reasonable set of pixels that approximate a line between them.</p><h4 id="line-drawing-using-implicit-line-equations"><a class="markdownIt-Anchor" href="#line-drawing-using-implicit-line-equations"></a> Line drawing using implicit line equations</h4><p>The most common way is the <code>midpoint</code> algorithm. The midpoint algorithm ends up drawing the same lines as the Bresenham alogithm, but more straight forward.</p><p>The first thing is to find the implicit equation for the line as discussed in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>0</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mi>y</mi><mo>+</mo><msub><mi>x</mi><mn>0</mn></msub><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>y</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(x,y) \equiv (y_0 - y_1)x + (x_1 - x_0)y + x_0y_1 - x_1y_0 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>.</p><p>Nexy, we assume the slop of the line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">m \in (0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> where the line is moving faster in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> than in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>. The key assumption of the midpoint algorithm is that we draw thinnest line possible that has no gaps. A diagonal connection between two pixels is not considered a gap.</p><p>The midpoint algorithm for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">m \in (0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> first estabilishes the left most point.</p><h4 id="triangle-rasterization"><a class="markdownIt-Anchor" href="#triangle-rasterization"></a> Triangle Rasterization</h4><p>Barycentric coordinates -&gt; color redering.</p><p>Another subtlety of rasterizing trangles is that we are usually rasterizing triangles that share vertices and edges.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The graphics pipeline is another approach to rendering: drawing objects one by one onto the screen, or &lt;code&gt;object-order rendering&lt;/code</summary>
      
    
    
    
    <category term="Computer Graphic" scheme="https://yifeiliu.dev/categories/Computer-Graphic/"/>
    
    
    <category term="Raterization" scheme="https://yifeiliu.dev/tags/Raterization/"/>
    
  </entry>
  
  <entry>
    <title>0. Driver Development for Xilinx MPSoC FPGA</title>
    <link href="https://yifeiliu.dev/2024/01/15/Create-driver-for-Xilinx/"/>
    <id>https://yifeiliu.dev/2024/01/15/Create-driver-for-Xilinx/</id>
    <published>2024-01-15T21:59:46.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-create-a-kernel-module-using-petalinux"><a class="markdownIt-Anchor" href="#0-create-a-kernel-module-using-petalinux"></a> 0. Create a kernel module using petalinux</h2><p>Use the command below to create a kernel module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">petalinux -t modules --name ktest --<span class="built_in">enable</span></span><br><span class="line">[Usage]</span><br><span class="line">petalinux-create -t modules --name mymodule --<span class="built_in">enable</span></span><br><span class="line">    -t          <span class="built_in">type</span>: project, apps, modules </span><br><span class="line">    --name, -n  specify the name <span class="keyword">for</span> a component or project</span><br><span class="line">    --<span class="built_in">enable</span>    <span class="built_in">enable</span> the apps or modules <span class="keyword">for</span> the project</span><br></pre></td></tr></table></figure><p>This command will creat the file and directory <code>project-spec/meta-user/recipes-modules/ktest</code> as following</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| files</span><br><span class="line">|    - ktest.c</span><br><span class="line">|    - Makefile</span><br><span class="line">| ktest.bb</span><br></pre></td></tr></table></figure><h2 id="1-modify-the-base-module"><a class="markdownIt-Anchor" href="#1-modify-the-base-module"></a> 1. Modify the base module</h2><p>We first modify the <code>ktest.c</code> file in the directory <code>files</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="comment">// Module metadata</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Hello world driver&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"><span class="comment">// Custom init and exit methods</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">custom_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/*When a function is declared as static in C, it means that the function has</span></span><br><span class="line"><span class="comment">     internal linkage, which restricts its visibility to the translation unit </span></span><br><span class="line"><span class="comment">     (source file) where it is defined. In other words, the function is only </span></span><br><span class="line"><span class="comment">     accessible within the same source file.*/</span></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Hello world driver loaded.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">custom_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Goodbye my friend...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Register the init and exit function</span></span><br><span class="line"><span class="comment">// module_init() will either be called during do_initcalls() (if builtin)</span></span><br><span class="line"><span class="comment">// or at module insertion time (if a module). There can only be one per module.</span></span><br><span class="line">module_init(custom_init);</span><br><span class="line"><span class="comment">// module_exit() will wrap the driver clean-up code with cleanup_module() when </span></span><br><span class="line"><span class="comment">// used with rmmod when the driver is a module. If the driver is statically </span></span><br><span class="line"><span class="comment">// compiled into the kernel, module_exit() has no effect. There can only be one </span></span><br><span class="line"><span class="comment">// per module.</span></span><br><span class="line">module_exit(custom_exit);</span><br></pre></td></tr></table></figure><p>Then, we update the <code>ktest.bb</code> with appending the following configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL_MODULE_AUTOLOAD += <span class="string">&quot;ktest&quot;</span></span><br></pre></td></tr></table></figure><p>This configuration will automatically load the kernel while booting.</p><h2 id="2-compile-the-kernel-image-and-boot"><a class="markdownIt-Anchor" href="#2-compile-the-kernel-image-and-boot"></a> 2. Compile the kernel image and boot</h2><h2 id="3-test-the-kernel"><a class="markdownIt-Anchor" href="#3-test-the-kernel"></a> 3. Test the kernel</h2><p>After booting the kernel,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dmesg | grep <span class="string">&quot;Hello&quot;</span></span><br><span class="line">[   19.061541] Hello world driver loaded.</span><br><span class="line">$ rmmod ktest &amp;&amp; dmesg | grep <span class="string">&quot;Goodbye&quot;</span></span><br><span class="line">[   97.127431] Goodbye my friend...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-create-a-kernel-module-using-petalinux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0-create-a-kernel-module-using-petalinux&quot;&gt;&lt;/a&gt; 0. Crea</summary>
      
    
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/categories/FPGA/"/>
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/tags/FPGA/"/>
    
    <category term="Linux" scheme="https://yifeiliu.dev/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Generate persistent ssh key for Xilinx MPSoC Linux (XLNX)</title>
    <link href="https://yifeiliu.dev/2024/01/08/Generate-persistent-ssh-key-for-Xilinx-MPSoC-Linux-XLNXw/"/>
    <id>https://yifeiliu.dev/2024/01/08/Generate-persistent-ssh-key-for-Xilinx-MPSoC-Linux-XLNXw/</id>
    <published>2024-01-08T16:27:49.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<p>Here is some background information and methodology on how to store SSH keys on persistent storage, and modify init scripts such that the petalinux image does not generate a new key on each boot:</p><p>This sequence of steps describes how to use the <strong>flash MTD</strong> partition for persistent storage. The use case being considered is to load a previously generated <code>RSA</code> key and prevent <code>dropbear</code> from generating a new one (the dropbear init script needs to be modified for doing this).</p><p>The Dropbear SSH server is included by default in Petalinux, and is built automatically into the rootfs. Upon boot up, the dropbear init script (named dropbear) is placed and executes from the <code>/etc/init.d</code> directory:</p><ul><li>This script has a function <code>gen_keys()</code>, which is responsible for generating the <code>RSA</code> key.</li><li>If a key already exists at <code>/etc/dropbear</code>, the <code>gen_keys()</code> function first deletes this key, and then generates a new one.<br />Although not recommended by Xilinx officially, there might be some use cases where this functionality is not desired. For example, when a user wants to avoid having new keys generated upon reboot, and instead loads them from persistent storage.</li></ul><p>In such cases, a <code>custom recipe</code> named <code>dropbear</code> can be added to the <code>Petalinux project</code>, with a custom init script that suppresses the call to <code>gen_keys()</code>. When the image is built and run from the board, the new dropbear init script will run and not create new keys at <code>/etc/dropbear</code>. The user can then copy over a previously generated key into this location from persistent storage.</p><p>This methodology can be dvivded into two parts:</p><ol><li>Generate a <code>RSA</code> key (on the board or laptop) and store it in the persistent storage (QSPI Flash) on the FPGA.</li><li>Boot up with the modified dropbear init script, mount the <strong>QSPI Flash</strong> device on a <code>JFFS</code> partition, and copy over the previously stored key into <code>/etc/dropbear</code>.</li></ol><p>Part 1:</p><ol><li>Build a normal Petalinux project and use those images to boot into the board. <strong>Default kernel config settings should include ZynqMP GQSPI as well as MTD block device support.</strong></li><li>From the Linux terminal, issue <code>dmesg | grep spi</code> and verify that four MTD partitions were created. Follow this by <code>cat /proc/mtd</code> to view the partitions. We will use the ‘spare’ MTD partition <code>/dev/mtd3</code> for persistent storage.</li><li>Erase <code>/dev/mtd3</code> partition using <code>flash_eraseall -j /dev/mtd3</code>.</li><li>Create a mount point for the flash partition: <code>mkdir /mnt/flash_mtd3</code>.</li><li>Mount flash partition as JFFS2 file system: <code>mount -t jffs2 /dev/mtdblock3 /mnt/flash_mtd3</code>. (Note that /dev/mtdblock3 is used rather than /dev/mtd3)</li><li>Copy Dropbear RSA key to flash partition: <code>cp /etc/dropbear/dropbear_rsa_host_key /mnt/flash_mtd3</code></li><li>Verify the copied key exists on the flash partition: <code>ls /mnt/flash_mtd3</code>.</li><li>Unmount flash partition: <code>umount /mnt/flash_mtd3</code>.</li><li>The Dropbear <code>RSA</code> key now resides in the persistent flash storage and can be accessed on successive boots</li><li>The existing Dropbear init script can be modified and used in Part 2. <strong>Copy the script (/etc/init.d/dropbear) over to your host machine</strong>.</li></ol><p>Part 2:</p><ol><li>Go back to your Petalinux project, and add a folder named ‘dropbear’ to <code>&lt;plnx_proj_root&gt;/project-spec/meta-user/recipes-core/</code>. Within this folder, build the following structure:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── dropbear</span><br><span class="line">│      ├── dropbear_%.bbappend</span><br><span class="line">│      └── files</span><br><span class="line">│              └── dropbear.initd</span><br></pre></td></tr></table></figure><ol start="2"><li>The dropbear init script in the ‘files’ folder above is the one you have copied over from Part 1, and <strong>modified by modifying the gen_keys()</strong>.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">gen_keys</span></span>() &#123;</span><br><span class="line">    <span class="built_in">mkdir</span> -p /mnt/qspi_mtd3</span><br><span class="line">    mount -t jffs2 /dev/mtdblock3 /mnt/qspi_mtd3</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/mnt/qspi_mtd3/dropbear_rsa_host_key&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">mkdir</span> -p <span class="variable">$DROPBEAR_RSAKEY_DIR</span></span><br><span class="line">       <span class="built_in">cp</span> /mnt/qspi_mtd3/dropbear_rsa_host_key <span class="variable">$DROPBEAR_RSAKEY</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$DROPBEAR_RSAKEY</span>&quot;</span> -a ! -s <span class="string">&quot;<span class="variable">$DROPBEAR_RSAKEY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">rm</span> <span class="variable">$DROPBEAR_RSAKEY</span> || <span class="literal">true</span></span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$DROPBEAR_RSAKEY</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">           <span class="built_in">mkdir</span> -p <span class="variable">$&#123;DROPBEAR_RSAKEY%/*&#125;</span></span><br><span class="line">           dropbearkey -t rsa -f <span class="variable">$DROPBEAR_RSAKEY</span> <span class="variable">$DROPBEAR_RSAKEY_ARGS</span></span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line">       <span class="built_in">cp</span> <span class="variable">$DROPBEAR_RSAKEY</span> /mnt/qspi_mtd3</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    umount /mnt/qspi_mtd3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create <code>dropbear_%.bbappend</code> as follows:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The dropbear_%.bbappend looks like this:</span></span><br><span class="line"><span class="comment"># Dropbear: suppress gen_keys.</span></span><br><span class="line">SRC_URI_append = <span class="string">&quot; \</span></span><br><span class="line"><span class="string">        file://dropbear.initd \</span></span><br><span class="line"><span class="string">        &quot;</span></span><br><span class="line">FILESEXTRAPATHS_prepend := <span class="string">&quot;<span class="variable">$&#123;THISDIR&#125;</span>/files:&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Overwrite the dropbear configuration with my configuration.</span></span><br><span class="line"><span class="function"><span class="title">do_install_append</span></span>() &#123;</span><br><span class="line">    install -m 0755 <span class="variable">$&#123;WORKDIR&#125;</span>/dropbear.initd <span class="variable">$&#123;D&#125;</span><span class="variable">$&#123;sysconfdir&#125;</span>/init.d/dropbear</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Add the line <code>SIGGEN_UNLOCKED_RECIPES_append = &quot;dropbear&quot;</code> to <code>&lt;plnx_proj_root&gt;/project-spec/meta-user/conf/petalinuxbsp.conf</code>.</li><li>Clean the Petalinux project and re-build: <code>petalinux-build -x mrproper</code> and <code>petalinux-build</code>.</li><li>Boot with the generated images. Observe that the key generation message is not displayed, and no key will exist at <code>/etc/dropbear</code>.</li><li>Mount flash partition containing original key: <code>mount -t jffs2 /dev/mtdblock3 /mnt/flash_mtd3</code></li><li>Copy key into default location: <code>cp /mnt/flash_mtd3/dropbear_rsa_host_key /etc/dropbear</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Here is some background information and methodology on how to store SSH keys on persistent storage, and modify init scripts such that the</summary>
      
    
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/categories/FPGA/"/>
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>TFTP for Xilinx ZCU106</title>
    <link href="https://yifeiliu.dev/2024/01/07/TFTP-for-Xilinx-ZCU106/"/>
    <id>https://yifeiliu.dev/2024/01/07/TFTP-for-Xilinx-ZCU106/</id>
    <published>2024-01-07T19:05:16.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setup-in-petalinux"><a class="markdownIt-Anchor" href="#setup-in-petalinux"></a> Setup in Petalinux</h2><ol><li>Launch the top-level system configuration menu.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">petalinux-config</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Select <em><strong>Image Packaging Configuration</strong></em>.</p></li><li><p>Select <em><strong>Copy final images to tftpboot</strong></em> and set <strong>tftpboot</strong> directory. By default, the TFTP directory ID is <strong>/tftpboot</strong>. Ensure this matches the TFTP server setup of your host.</p></li><li><p>Build the project</p></li></ol><h2 id="setup-the-fpga-into-jtag-mode"><a class="markdownIt-Anchor" href="#setup-the-fpga-into-jtag-mode"></a> Setup the FPGA into JTAG mode</h2><p>Config the FPGA into JTAG mode.<br /><img src="/images/00.jtag_mode.png" alt="test" /></p><h2 id="boot-from-ethernet"><a class="markdownIt-Anchor" href="#boot-from-ethernet"></a> Boot from ethernet</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">petalinux-boot --jtag --u-boot --fpga --bitstream images/linux/system.bit</span><br></pre></td></tr></table></figure><h2 id="log"><a class="markdownIt-Anchor" href="#log"></a> Log</h2><p>Connect to the ZCU106 through the UART.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Release 2020.2   Jan  7 2024  -  21:10:37</span><br><span class="line">NOTICE:  ATF running on XCZU7EV/silicon v4/RTL5.1 at 0xfffea000</span><br><span class="line">NOTICE:  BL31: v2.2(release):xlnx_rebase_v2.2_2020.3</span><br><span class="line">NOTICE:  BL31: Built : 21:09:55, Jan  7 2024</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U-Boot 2020.01 (Jan 07 2024 - 21:11:18 +0000)</span><br><span class="line"></span><br><span class="line">Model: ZynqMP ZCU106 RevA</span><br><span class="line">Board: Xilinx ZynqMP   </span><br><span class="line">DRAM:  4 GiB</span><br><span class="line">PMUFW:  v1.1</span><br><span class="line">EL Level:       EL2</span><br><span class="line">Chip ID:        zu7ev  </span><br><span class="line">NAND:  0 MiB</span><br><span class="line">MMC:   mmc@ff170000: 0 </span><br><span class="line">In:    serial@ff000000 </span><br><span class="line">Out:   serial@ff000000 </span><br><span class="line">Err:   serial@ff000000 </span><br><span class="line">Bootmode: JTAG_MODE</span><br><span class="line">Reset reason:   EXTERNAL</span><br><span class="line">Net:</span><br><span class="line">ZYNQ GEM: ff0e0000, mdio bus ff0e0000, phyaddr 12, interface rgmii-id</span><br><span class="line"></span><br><span class="line">Warning: ethernet@ff0e0000 using MAC address from ROM</span><br><span class="line">eth0: ethernet@ff0e0000</span><br><span class="line">Hit any key to stop autoboot:  0</span><br><span class="line">JTAG: Trying to boot script at 0x20000000</span><br><span class="line"><span class="comment">## Executing script at 20000000</span></span><br><span class="line">Wrong image format <span class="keyword">for</span> <span class="string">&quot;source&quot;</span> <span class="built_in">command</span></span><br><span class="line">JTAG: SCRIPT FAILED: continuing...</span><br><span class="line">starting USB...</span><br><span class="line">Bus dwc3@fe200000: usb maximum-speed not found</span><br><span class="line">Register 2000440 NbrPorts 2</span><br><span class="line">Starting the controller</span><br><span class="line">USB XHCI 1.00</span><br><span class="line">scanning bus dwc3@fe200000 <span class="keyword">for</span> devices... 1 USB Device(s) found</span><br><span class="line">       scanning usb <span class="keyword">for</span> storage devices... 0 Storage Device(s) found</span><br><span class="line">ethernet@ff0e0000 Waiting <span class="keyword">for</span> PHY auto negotiation to complete........... <span class="keyword">done</span></span><br><span class="line">BOOTP broadcast 1</span><br><span class="line">BOOTP broadcast 2</span><br><span class="line">BOOTP broadcast 3</span><br><span class="line">DHCP client bound to address 10.42.0.65 (766 ms)</span><br><span class="line">*** Warning: no boot file name; using <span class="string">&#x27;0A2A0041.img&#x27;</span></span><br><span class="line">Using ethernet@ff0e0000 device</span><br><span class="line">TFTP from server 10.42.0.1; our IP address is 10.42.0.65</span><br><span class="line">Filename <span class="string">&#x27;0A2A0041.img&#x27;</span>.</span><br><span class="line">Load address: 0x8000000</span><br><span class="line">Loading: *</span><br><span class="line">TFTP error: <span class="string">&#x27;File not found&#x27;</span> (1)</span><br><span class="line">Not retrying...</span><br><span class="line">missing environment variable: pxeuuid</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: pxelinux.cfg/01-00-0a-35-07-13-54</span><br><span class="line">Using ethernet@ff0e0000 device</span><br><span class="line">TFTP from server 10.42.0.1; our IP address is 10.42.0.65</span><br><span class="line">Filename <span class="string">&#x27;pxelinux.cfg/01-00-0a-35-07-13-54&#x27;</span>.</span><br></pre></td></tr></table></figure><h2 id="issue"><a class="markdownIt-Anchor" href="#issue"></a> Issue</h2><p>The boot of linux is OK. But when I enable <strong>packagegroup-core-buildessential-dbg</strong> and <strong>packagegroup-core-buildessential-dev</strong> in rootfs, I came across the error <strong>boot.scr.uimg not found</strong>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;setup-in-petalinux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#setup-in-petalinux&quot;&gt;&lt;/a&gt; Setup in Petalinux&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Launch the top-lev</summary>
      
    
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/categories/FPGA/"/>
    
    
    <category term="FPGA" scheme="https://yifeiliu.dev/tags/FPGA/"/>
    
    <category term="TFTP" scheme="https://yifeiliu.dev/tags/TFTP/"/>
    
  </entry>
  
  <entry>
    <title>2. Using OOP in SystemVerilog</title>
    <link href="https://yifeiliu.dev/2024/01/04/Using-OOP-in-SystemVerilog/"/>
    <id>https://yifeiliu.dev/2024/01/04/Using-OOP-in-SystemVerilog/</id>
    <published>2024-01-05T01:46:29.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="using-obejcts"><a class="markdownIt-Anchor" href="#using-obejcts"></a> Using Obejcts</h2><p>Using class in Sv is analogy to C++, refering to variables and routines in an object with the <code>.</code> notation.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BusTran b;</span><br><span class="line">b = <span class="keyword">new</span>;</span><br><span class="line">b<span class="variable">.addr</span> = <span class="number">32&#x27;h42</span>;</span><br><span class="line">b<span class="variable">.dispaly</span>(); <span class="comment">// Call a routine</span></span><br></pre></td></tr></table></figure><p>In <strong>strict OOP</strong>, the only access to variables in an object should be through its public methods such as <code>get()</code> and <code>put()</code>.<br />While the get() and put() methods are fine for compilers, GUIs, and APIs, you should stick with public variables that can be directly accessed anywhere in the testbench.</p><h2 id="static-variables-vs-global-variables"><a class="markdownIt-Anchor" href="#static-variables-vs-global-variables"></a> Static Variables vs. Global Variables</h2><p>Sometimes, we need a variable that is shared by all objects of a certain type.<br />Without OOP, we would probably create a global variable, which is used by one small piece of code, but is visible to the entire testbench.</p><h3 id="using-static-variable"><a class="markdownIt-Anchor" href="#using-static-variable"></a> Using Static variable</h3><p>Example, creating static variable inside a class.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTran;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// Number of objects created, shared across objects.</span></span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">// not static, each object has its own copy. </span></span><br><span class="line">            <span class="comment">// track objects flow through design</span></span><br><span class="line">    <span class="comment">// Unique instance ID</span></span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">new</span>; <span class="comment">// COnstructor</span></span><br><span class="line">        id = count++; <span class="comment">// Set ID, and change the value of count</span></span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"></span><br><span class="line">BusTran b1, b2;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    b1 = <span class="keyword">new</span>; <span class="comment">// First object, id = 0;</span></span><br><span class="line">    b2 = <span class="keyword">new</span>; <span class="comment">// 2nd object, id = 1;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Each time a new object is constructed, it is tagged with a unique value, and count is incremented.<br />SystemVerilog does not allow printing the address of an object, but we can create an ID field. Whenever tempting to make a global variable, consider making a class-level static variable.</p><h3 id="initializing-static-variables"><a class="markdownIt-Anchor" href="#initializing-static-variables"></a> Initializing static variables</h3><p>Cannot do this in the class constructor, because it’s called for every single new object.<br />Intead, using the <code>initial</code> block before the first object is constructed.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="keyword">static</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">task</span> initialize(<span class="keyword">int</span> val);</span><br><span class="line">        count = val;</span><br><span class="line">    <span class="keyword">endtask</span></span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> s; <span class="comment">// s is still a null pointer</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    s<span class="variable">.initialize</span>(<span class="number">42</span>); <span class="comment">// This is legal, as the task only uses static variables </span></span><br><span class="line">                      <span class="comment">// that are not created in the constructor</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="class-routines-method"><a class="markdownIt-Anchor" href="#class-routines-method"></a> Class Routines (Method)</h3><p>A routine (a.k.a. method) in a class is just a task or function defined inside the scope of the class.</p><h3 id="define-routines-outside-of-the-class"><a class="markdownIt-Anchor" href="#define-routines-outside-of-the-class"></a> Define Routines Outside of the Class</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTran;</span><br><span class="line">    <span class="keyword">bit</span> [<span class="number">31</span>:<span class="number">0</span>] addr, crc, data[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">function</span> <span class="keyword">void</span> display();</span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"><span class="comment">// class body(BusTran) class scope opertater(::) method(display)</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">void</span> BusTran::display(); <span class="comment">// this is a prototype</span></span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">&quot;@%0d: BusTran addr=%h, crc=%h&quot;</span>, addr, crc);</span><br><span class="line">    <span class="built_in">$write</span>(<span class="string">&quot;\tdata[0-7]=&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (data[i]) </span><br><span class="line">        <span class="built_in">$write</span>(data[i]);</span><br><span class="line">    <span class="built_in">$display</span>();</span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PCI_Tran;</span><br><span class="line">    <span class="keyword">bit</span> [<span class="number">31</span>:<span class="number">0</span>] addr, data; <span class="comment">// Use realistic names</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">function</span> <span class="keyword">void</span> display();</span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">void</span> PCI_Tran::display();</span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">&quot;@%0d: PCI: addr=%h, data=%h&quot;</span>, addr, data);</span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Broken;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">function</span> <span class="keyword">void</span> display;</span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">void</span> display; <span class="comment">// Missing Broken::</span></span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">&quot;Broken: id=%0d&quot;</span>, id); <span class="comment">// Error, id not found</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="scoping-rules"><a class="markdownIt-Anchor" href="#scoping-rules"></a> Scoping rules</h2><p>A scope is a block of code such as a module, program, task, function, class, or begin - end block. The for and foreach loops automatically create a block so that an index variable can be declared or created local to the scope of the loop.</p><p><strong>Declare all your variables in the smallest scope that encloses all uses of the variable</strong>.</p><h2 id="using-one-class-inside-another"><a class="markdownIt-Anchor" href="#using-one-class-inside-another"></a> Using One class Inside Another</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTran;</span><br><span class="line">    <span class="keyword">bit</span> [<span class="number">31</span>:<span class="number">0</span>]addr, crc, data[<span class="number">8</span>];</span><br><span class="line">    Statistics stats; <span class="comment">// a hanlder of another class</span></span><br><span class="line">    <span class="comment">// remember to instantiaste the objects,</span></span><br><span class="line">    <span class="comment">// otherwise stats os null and the call to start fails.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">new</span>();</span><br><span class="line">        stats = <span class="keyword">new</span>(); <span class="comment">// best to instantiate in the constructor</span></span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">task</span> create_packet();</span><br><span class="line">        stats<span class="variable">.start</span>();</span><br><span class="line">    <span class="keyword">endtask</span></span><br><span class="line"><span class="keyword">endclass</span></span><br></pre></td></tr></table></figure><h3 id="compilation-order-issue"><a class="markdownIt-Anchor" href="#compilation-order-issue"></a> Compilation order issue</h3><p>Sometimes you need to compile a class that includes another class that is not yet defined. The declaration of the included class’s handle causes an error, as the compiler does not recognize the new type. Declare the class name with a <strong>typedef</strong> statement, as shown below.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> Statistics;</span><br><span class="line"><span class="keyword">class</span> BusTran;</span><br><span class="line">Statistics stats;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"><span class="keyword">class</span> Statistics;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endclass</span></span><br></pre></td></tr></table></figure><h3 id="dynamic-obejcts"><a class="markdownIt-Anchor" href="#dynamic-obejcts"></a> Dynamic Obejcts</h3><p>Use <strong>ref</strong> to pass the address of scalar variable (noarray, nonobject), so the routine can modify it.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Transmit a packet onto a 32-bit bus</span></span><br><span class="line"><span class="keyword">task</span> transmit(BusTran bt);</span><br><span class="line">    CBbus<span class="variable">.rx_data</span> &lt;= bt<span class="variable">.data</span>;</span><br><span class="line">    bt<span class="variable">.timestamp</span> = <span class="built_in">$time</span>; <span class="comment">// cannot modify the handle, need to use ref</span></span><br><span class="line"><span class="keyword">endtask</span></span><br><span class="line">BusTran b;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    b = <span class="keyword">new</span>();</span><br><span class="line">    b<span class="variable">.addr</span> = <span class="number">42</span>;</span><br><span class="line">    transmit(b);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="modifying-objects-in-flight"><a class="markdownIt-Anchor" href="#modifying-objects-in-flight"></a> Modifying objects in flight</h3><p>A very common mistake is forgetting to create a new object for each transaction in the testbench,</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> generator_bad(<span class="keyword">int</span> n);</span><br><span class="line">    BusTran b;</span><br><span class="line">    b = <span class="keyword">new</span>();</span><br><span class="line">    <span class="comment">// Create one new object</span></span><br><span class="line">    <span class="keyword">repeat</span> (n) <span class="keyword">begin</span></span><br><span class="line">        b<span class="variable">.addr</span> = <span class="built_in">$random</span>();</span><br><span class="line">        <span class="comment">// Initialize variables</span></span><br><span class="line">        <span class="built_in">$display</span>(<span class="string">&quot;Sending addr=%h&quot;</span>, b<span class="variable">.addr</span>);</span><br><span class="line">        transmit(b);</span><br><span class="line">        <span class="comment">// Send it into the DUT</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endtask</span></span><br></pre></td></tr></table></figure><p>So every time through the loop, <code>generator_bad</code> changes the object at the same time it is being transmitted. When you run this, the <code>$display</code> shows many addr values, but all transmitted <code>BusTrans</code> have the same value of <code>addr</code>. The bug occurs if <code>transmit</code> stores the object and keeps using it even after <code>transmit</code> returns. If your <code>transmit</code> task does not keep a reference to the object, you can recycle the same object over and over.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> generator_good(<span class="keyword">int</span> n);</span><br><span class="line">    BusTran b;</span><br><span class="line">    <span class="keyword">repeat</span> (n) <span class="keyword">begin</span></span><br><span class="line">        b = <span class="keyword">new</span>(); <span class="comment">// Create one new object</span></span><br><span class="line">        b<span class="variable">.addr</span> = <span class="built_in">$random</span>();<span class="comment">// Initialize variables</span></span><br><span class="line">        <span class="built_in">$display</span>(<span class="string">&quot;Sending addr=%h&quot;</span>, b<span class="variable">.addr</span>);</span><br><span class="line">        transmit(b); <span class="comment">// Send it into the DUT</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endtask</span></span><br></pre></td></tr></table></figure><p>You can make arrays of handles, each of which refers to an object, e.g., <code>BusTran Barray[10]</code>.</p><h2 id="copying-objects"><a class="markdownIt-Anchor" href="#copying-objects"></a> Copying objects</h2><p>You may want to make a copy of an object to keep a routine from modifying the original, or in a generator to preserve the constraints. You can either use the simple, built-in copy available with <code>new</code> , or you can write your own for more complex classes.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTrain;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"></span><br><span class="line">BusTran src, dst;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    src = <span class="keyword">new</span>;</span><br><span class="line">    dst = <span class="keyword">new</span> src;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This is a shallow copy, blindly transcribing values from source to destination. <strong>If the class contains a handle to another class, only the top level object is copied by <code>new</code>, not the lower level one</strong>. Example as following,</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTran;</span><br><span class="line">    <span class="keyword">bit</span> [<span class="number">31</span>:<span class="number">0</span>] addr, crc, data[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    Statistics stats;</span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">new</span>;</span><br><span class="line">        stats = <span class="keyword">new</span>;</span><br><span class="line">        id = count++;</span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"></span><br><span class="line">BusTran src, dst;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    src = <span class="keyword">new</span>;</span><br><span class="line">    <span class="comment">// Create first object</span></span><br><span class="line">    src<span class="variable">.stats</span><span class="variable">.startT</span> = <span class="number">42</span>;</span><br><span class="line">    dst = <span class="keyword">new</span> src;</span><br><span class="line">    <span class="comment">// Copy src to dst</span></span><br><span class="line">    dst<span class="variable">.stats</span><span class="variable">.startT</span> = <span class="number">84</span>; <span class="comment">// Changes stats for dst &amp; src</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="/images/01.ObjectCopy.png" alt="Objects and handles after copy with new" /></p><p>Note:</p><ul><li>it doesn’t call the custormized <code>new</code> function.</li><li>both objects point to the same <code>Statistics</code> object and both have the same <code>id</code>.</li></ul><h3 id="writing-your-own-simple-copy-function"><a class="markdownIt-Anchor" href="#writing-your-own-simple-copy-function"></a> Writing your own simple copy function</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTran;</span><br><span class="line">    <span class="keyword">bit</span> [<span class="number">31</span>:<span class="number">0</span>] addr, crc, data[<span class="number">8</span>];</span><br><span class="line">    Statistics stats;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">new</span>;</span><br><span class="line">        stats = <span class="keyword">new</span>;</span><br><span class="line">        id = count++;</span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line">    <span class="keyword">function</span> BusTran copy;</span><br><span class="line">        copy = <span class="keyword">new</span>;</span><br><span class="line">        copy<span class="variable">.addr</span> = addr;</span><br><span class="line">        copy<span class="variable">.crc</span> = crc;</span><br><span class="line">        copy<span class="variable">.data</span> = data;</span><br><span class="line">        copy<span class="variable">.stats</span> = stats<span class="variable">.copy</span>;</span><br><span class="line">        id = count++;</span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">endclass</span></span><br></pre></td></tr></table></figure><p><strong>Note that you also need to write a copy for the Statistics class, and every other class in the hierarchy</strong>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;using-obejcts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#using-obejcts&quot;&gt;&lt;/a&gt; Using Obejcts&lt;/h2&gt;
&lt;p&gt;Using class in Sv is analogy to C++, re</summary>
      
    
    
    
    <category term="SystemVerilog Tutorial" scheme="https://yifeiliu.dev/categories/SystemVerilog-Tutorial/"/>
    
    
    <category term="SystemVerilog" scheme="https://yifeiliu.dev/tags/SystemVerilog/"/>
    
  </entry>
  
  <entry>
    <title>What is uid, euid in Linux</title>
    <link href="https://yifeiliu.dev/2024/01/04/uid-euid-in-Linux/"/>
    <id>https://yifeiliu.dev/2024/01/04/uid-euid-in-Linux/</id>
    <published>2024-01-04T21:00:09.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="uid"><a class="markdownIt-Anchor" href="#uid"></a> UID</h3><ol><li>The UID, or User ID, is the real user identifier associated with a process. It represents the user who launched the process. The UID can be got using <code>getuid()</code> function or using <code>id</code> in <code>bash</code>.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uid_t</span> uid = getuid();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UID: %u\n&quot;</span>, uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>The UID is generally set at the beginning of a process and remains constant throughout the process’s lifetime.</li><li>The UID is used for various permission checks and to determine ownership of files and processes.</li></ol><h3 id="euid"><a class="markdownIt-Anchor" href="#euid"></a> EUID</h3><ol><li>The EUID, or Effective User ID, is a separate user identifier that <strong>can be changed during the execution of a process</strong>, using using system calls like seteuid() or setreuid() to temporarily gain or relinquish certain privileges. <strong>Typically, only processes running as the superuser (UID 0) or with the setuid permission can change their effective user ID</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Attempt to set the effective user ID to 0 (root)</span></span><br><span class="line">    <span class="keyword">if</span> (seteuid(<span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Successfully set the effective UID to 0 (root).\n&quot;</span>);</span><br><span class="line">        <span class="comment">// After performing the privileged operations, you should reset the effective UID</span></span><br><span class="line">        <span class="comment">// to the original value using seteuid(getuid()) for security reasons.</span></span><br><span class="line">        seteuid(getuid());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;seteuid&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>The EUID is used for most permission checks in the kernel and is what determines the process’s effective privileges.</li><li>When a process is executed, the EUID is often initially set to the UID of the user who launched the process, that can be derived from <code>geteuid()</code> (notice the <code>e</code> before <code>uid</code>) system call or <code>echo $EUID</code> in <code>bash</code>.</li></ol><p>In most Unix-like systems:</p><ul><li>UID 0 is reserved for the root user (superuser).</li><li>UID 1-99 are often reserved for system users and groups.</li><li>UID 1000 and above are typically assigned to regular user accounts.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;uid&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#uid&quot;&gt;&lt;/a&gt; UID&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The UID, or User ID, is the real user identifier associated wit</summary>
      
    
    
    
    <category term="Usage of Linux" scheme="https://yifeiliu.dev/categories/Usage-of-Linux/"/>
    
    
    <category term="Linux" scheme="https://yifeiliu.dev/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>1. OOP in SystemVerilog</title>
    <link href="https://yifeiliu.dev/2024/01/03/OOP-in-SystemVerilog/"/>
    <id>https://yifeiliu.dev/2024/01/03/OOP-in-SystemVerilog/</id>
    <published>2024-01-04T01:22:27.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oop-terminology"><a class="markdownIt-Anchor" href="#oop-terminology"></a> OOP Terminology</h2><ul><li><p>Class: a basic building block containing routines and variables, it's analogue in Verilog is a <code>module</code>.</p></li><li><p>Object: an instance of the class. In Verilog, instanitate a module to use it.</p></li><li><p>Handle: a pointor to the object. In veriolog, it stands for the instance when refers to signal and methods from outstide the module.</p></li><li><p>Property: a variable that holds data, such as a <code>reg</code> or <code>wire</code> in Verilog.</p></li><li><p>Method: procedure code that manipulates variables, contained in tasks and functions. Verilog modules have <code>tasks</code> and <code>functions</code> plus <code>initial</code> and <code>always</code> blocks.</p></li><li><p>Prototype: the head of a routine that shows the name, type and arugment list. The body of the routine contains the exectuable code.</p></li></ul><p>In Verilog you build complex designs by creating modules and instantiating them hierarchically. In OOP you create classes and instantiate them (creating objects) to create a similar hierarchy.</p><p>Following is an example of a class:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Transaction;</span><br><span class="line">    <span class="keyword">bit</span> [<span class="number">31</span>:<span class="number">0</span>]addr, crc, data[<span class="number">8</span>]; <span class="comment">// Property</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">void</span> display <span class="comment">//Method</span></span><br><span class="line">        <span class="built_in">$display</span>(<span class="string">&quot;Transaction:%h&quot;</span>, addr);</span><br><span class="line">    <span class="keyword">endfunction</span>: display</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">void</span> calc_crc;</span><br><span class="line">        crc = addr ^ data<span class="variable">.xor</span>;</span><br><span class="line">    <span class="keyword">endfunction</span>:calc_crc</span><br><span class="line"></span><br><span class="line"><span class="keyword">endclass</span>:Transaction</span><br><span class="line"></span><br><span class="line">Transaction tr; <span class="comment">// Declare a handler, it&#x27;s a null</span></span><br><span class="line">Tr = <span class="keyword">new</span>(); <span class="comment">// Allocate a Transaction object</span></span><br></pre></td></tr></table></figure><p><code>new</code> allocate the space for the BusTran, initializes the variables to the default value, <strong>0 for 2-state variables and X for 4-state ones</strong>, and returns the address where object is stored.<br />The <code>new</code> function not only allocates memory but also initialize the values.<br />We can also define the <code>new</code> function to set the values of variables.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BusTrain;</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>]addr, crc, data[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">new</span>(<span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>]addr=<span class="number">3</span>,d=<span class="number">5</span>); </span><br><span class="line">        <span class="comment">// does not have a type, as it always returns an objec of the same type</span></span><br><span class="line">        <span class="comment">// as the class</span></span><br><span class="line">        <span class="comment">// Sets addr and data to fixed values, but leaves crc as X.</span></span><br><span class="line">        <span class="comment">// SV allocate space for the object automatically.</span></span><br><span class="line">        <span class="keyword">this</span><span class="variable">.addr</span> = addr;</span><br><span class="line">        <span class="keyword">foreach</span>(data[i])</span><br><span class="line">            data[i] = d;</span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Driver;</span><br><span class="line">    BusTran bt;</span><br><span class="line">    <span class="keyword">function</span> <span class="keyword">new</span>(); <span class="comment">// Driver&#x27;s new function</span></span><br><span class="line">        bt = <span class="keyword">new</span>(); <span class="comment">// call the BusTran new function</span></span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">endclass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    BusTran b;</span><br><span class="line">    b = <span class="keyword">new</span>(<span class="number">10</span>); <span class="comment">// addr is initialized to 10, but data is default 5.</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="new-vs-new"><a class="markdownIt-Anchor" href="#new-vs-new"></a> <code>new()</code> vs <code>new[]</code></h3><p><code>new()</code> can take arguments for setting object values, while <code>new[]</code> only takes single value for the array size.</p><h3 id="object-deallocation"><a class="markdownIt-Anchor" href="#object-deallocation"></a> Object deallocation</h3><p>Garbage collection is the process of automatically freeing objects that are no longer referenced. SystemVerilog keeps tracking of the number of handles that point to it. When the last handle no longer references an object, SystemVerilog releases the memory for it.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BusTran b; <span class="comment">// a handle</span></span><br><span class="line">b = <span class="keyword">new</span>; <span class="comment">// calles new to construct an object, allocate the first object</span></span><br><span class="line">         <span class="comment">// e.g., b points to the object</span></span><br><span class="line">b = <span class="keyword">new</span>; <span class="comment">// Allocate the second one, free the first one</span></span><br><span class="line">b = <span class="literal">null</span>&#x27; <span class="comment">// Deallocate the second</span></span><br></pre></td></tr></table></figure><p>Note the differences with C++:</p><ul><li>SV handle can only point to objects of one type. C++ a typical untyped pointer is only an address in memory.</li><li>SV doesn’t allow any modification of a handle or using a handle of one type to refer to an object of another type.</li><li>Garbage collection in C/C++ is manual, suffering from “memory leaks” when forgets deallocating objects.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;oop-terminology&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#oop-terminology&quot;&gt;&lt;/a&gt; OOP Terminology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class: a basic building</summary>
      
    
    
    
    <category term="SystemVerilog Tutorial" scheme="https://yifeiliu.dev/categories/SystemVerilog-Tutorial/"/>
    
    
    <category term="SystemVerilog" scheme="https://yifeiliu.dev/tags/SystemVerilog/"/>
    
  </entry>
  
  <entry>
    <title>Why use pthread_cond_wait in a loop</title>
    <link href="https://yifeiliu.dev/2024/01/01/Why-use-pthread-cond-wait-in-a-loop/"/>
    <id>https://yifeiliu.dev/2024/01/01/Why-use-pthread-cond-wait-in-a-loop/</id>
    <published>2024-01-02T03:40:17.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<p>In the producer and consumer model, we usually use <code>pthread_cond_wait</code> to put the thread into sleep while the execution is not statifised. For example,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When the product queue is full, put the producer into wait condition</span></span><br><span class="line"><span class="keyword">while</span>(q.size() == LIMIT_SIZE) &#123;</span><br><span class="line">    pthread_cond_wait(&amp;notfull, &amp;lock);</span><br><span class="line">    <span class="comment">// When the not empty signal is receiver, wake up the thread.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Production code begin</span></span><br><span class="line"><span class="comment">// xxxx</span></span><br><span class="line"><span class="comment">// Production code end</span></span><br></pre></td></tr></table></figure><p>Instead of forwarding to the production code, thread goes back to the condition check in the <code>while</code>.</p><p>Why? Follwing is an example,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Thread <span class="number">1</span>                      Thread <span class="number">2</span>                Thread <span class="number">3</span></span><br><span class="line">q.size() == LIMIT (True)</span><br><span class="line">pthread_cond_wait:</span><br><span class="line">    <span class="number">1.</span> unlock mutex</span><br><span class="line">    <span class="number">2.</span> wait</span><br><span class="line">                            lock mutex</span><br><span class="line">                            <span class="built_in">set</span> condition: not full</span><br><span class="line">                            pthread_cond_signal</span><br><span class="line">                            unlock mutex</span><br><span class="line">                                                    lock mutex</span><br><span class="line">                                                    check condition: not full</span><br><span class="line">                                                        <span class="number">1.</span> Doing staff</span><br><span class="line">                                                        <span class="number">2.</span> unset condition</span><br><span class="line">                                                    unlock mutex</span><br><span class="line">pthread_cond_wait:</span><br><span class="line">    <span class="number">1.</span> wake up</span><br><span class="line">    <span class="number">2.</span> lock mutex</span><br><span class="line">&lt;thread is awake, but condition is unset&gt;</span><br></pre></td></tr></table></figure><p>When <code>thread 2</code> sends out the condition signal, there may be another thread, e.g., <code>thread 3</code> may <code>steal</code> the conditional flag and disquailify the wake up condition. There is because the thread must release the mutex before waiting. Unless it is guaranteed that only one thread can wait on that condition, e.g., <code>one producer</code> and <code>one consumer</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the producer and consumer model, we usually use &lt;code&gt;pthread_cond_wait&lt;/code&gt; to put the thread into sleep while the execution is not</summary>
      
    
    
    
    <category term="Using pthread" scheme="https://yifeiliu.dev/categories/Using-pthread/"/>
    
    
    <category term="pthread" scheme="https://yifeiliu.dev/tags/pthread/"/>
    
  </entry>
  
  <entry>
    <title>Writing plan of 2024</title>
    <link href="https://yifeiliu.dev/2024/01/01/Writing-plan/"/>
    <id>https://yifeiliu.dev/2024/01/01/Writing-plan/</id>
    <published>2024-01-01T06:00:01.000Z</published>
    <updated>2024-10-04T01:44:36.308Z</updated>
    
    <content type="html"><![CDATA[<ol><li>iToF sensor stereo calibration</li><li>RGB+iToF calibration</li><li>Image Singal Pipeline</li><li>SystemVerilog verification tutroial</li><li>OS scheduling</li><li>Neural Network accelartor</li><li>Super-Scalar processor</li><li>PCIE usage</li><li>Color correction</li><li>Link, Assemble</li><li>Digital VLSI</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;iToF sensor stereo calibration&lt;/li&gt;
&lt;li&gt;RGB+iToF calibration&lt;/li&gt;
&lt;li&gt;Image Singal Pipeline&lt;/li&gt;
&lt;li&gt;SystemVerilog verification tut</summary>
      
    
    
    
    <category term="plan" scheme="https://yifeiliu.dev/categories/plan/"/>
    
    
    <category term="Writing Plan" scheme="https://yifeiliu.dev/tags/Writing-Plan/"/>
    
  </entry>
  
</feed>
